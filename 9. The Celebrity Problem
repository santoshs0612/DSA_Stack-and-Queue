A celebrity is a person who is known to all but does not know anyone at a party. If you go to a party of N people, find if there is a celebrity in the party or not.
A square NxN matrix M[][] is used to represent people at the party such that if an element of row i and column j  is set to 1 it means ith person knows jth person. Here M[i][i] will always be 0.
Note: Follow 0 based indexing.
Follow Up: Can you optimize it to O(N)
 

Example 1:

Input:
N = 3
M[][] = {{0 1 0},
         {0 0 0}, 
         {0 1 0}}
Output: 1
Explanation: 0th and 2nd person both
know 1. Therefore, 1 is the celebrity. 

Example 2:

Input:
N = 2
M[][] = {{0 1},
         {1 0}}
Output: -1
Explanation: The two people at the party both
know each other. None of them is a celebrity.


//User function template for C++

class Solution 
{
    public:
    bool knows(vector<vector<int>> &M, int n, int a,int b)
    {
        if(M[a][b]==1)
        {
            return true;
        }
        else{
            return false;
        }
    }
    //Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& M, int n) 
    {
        // code here 
// O(N2)
        // int row = M.size();
        // int col = M[0].size();
        // int cel=-1;
        // int gc=0;
        // for(int i=0;i<row;i++)
        // {
        //     int t=0;
        //     for(int j=0;j<col;j++)
        //     {
        //         if(M[i][j]!=0)
        //         {
        //             break;
        //         }
        //         else if(M[i][j]==0)
        //         {
        //             t++;
        //             gc++;
        //             if(t==col)
        //             {
        //                 cel= i;
        //             }
                    
        //         }
        //     }
        // }
        // if(cel==-1)
        // {
        //     return -1;
        // }
        // int p=0;
        // for(int i=0;i<row;i++)
        // {

        //     if(M[i][cel]==1)
        //     {
        //       p++;  
        //     }
        //     if(cel== i && M[i][cel]==1)
        //     {
        //         return -1;
        //     }
        // }
        // if(p==(row-1) )
        // {
        //   return cel; 
        // }
        // else 
        // {
        //     return -1;
        // }
        
// O(N)+O(N)
        // using stack
        
        stack<int> s;
        
        // putting elements into stack
        
        for(int i=0;i<n;i++)
        {
            s.push(i);
        }
        // performing by removing elements form stack 
        
        while(s.size()>1)
        {
            int a= s.top();
            s.pop();
            int b= s.top();
            s.pop();
            
            if(knows(M,n,a,b))
            {
                s.push(b);
            }
            else 
            {
                s.push(a);
            }
        }
        int ans = s.top();
        
        // row operation 
        int zeroCount=0;
        for(int i=0;i<n;i++)
        {
            if(M[ans][i]==0)
            {
                zeroCount++;
            }
        }
        if(zeroCount!=n)
        {
            return -1;
        }
        // column operation 
        int oneCount=0;
        for(int i=0;i<n;i++)
        {
            if(M[i][ans]==1)
            {
                oneCount++;
            }
        }
        
        if(oneCount!=n-1)
        {
            return -1;
        }
        
        return ans;
        
    }
};
