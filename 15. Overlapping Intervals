Given a collection of Intervals, the task is to merge all of the overlapping Intervals.

Example 1:

Input:
Intervals = {{1,3},{2,4},{6,8},{9,10}}
Output: {{1, 4}, {6, 8}, {9, 10}}
Explanation: Given intervals: [1,3],[2,4]
[6,8],[9,10], we have only two overlapping
intervals here,[1,3] and [2,4]. Therefore
we will merge these two and return [1,4],
[6,8], [9,10].
Example 2:

Input:
Intervals = {{6,8},{1,9},{2,4},{4,7}}
Output: {{1, 9}}

class Solution {
public:
    vector<vector<int>> overlappedInterval(vector<vector<int>>& arr) {
         // Code here
        //  sort(intervals.begin(),intervals.end());
         
        // int row= intervals.size();
        // int column=intervals[0].size();
        // vector<vector<int>> ans;
        // //cout<<row<<" "<< column;
        // int start=INT_MAX;
        // int end=INT_MIN;
        // vector<int>temp;
        // temp.push_back(intervals[0][0]);
        // temp.push_back(intervals[0][1]);
        // ans.push_back(temp);
        // //temp.clear();
        // int i=1;
        // while(i<row)
        // {
        //     if(temp[1]>=intervals[i][0])
        //     {
        //         //start=min(temp[0],intervals[i][0]);
        //         end= max(temp[1],intervals[i][1]);
        //         temp.clear();
        //         temp.push_back({temp[0]);
        //         temp.push_back(end);
        //         ans.pop_back();
        //         ans.push_back(temp);
        //         //temp.clear();
        //         temp=ans.back();
        //         i++;
        //     }
        //     else 
        //     {
        //         temp.clear();
        //         temp.push_back(intervals[i][0]);
        //         temp.push_back(intervals[i][1]);
        //         ans.push_back(temp);
        //         //temp.clear();
        //         //temp=ans.back();
        //         i++;
        //     }

        //  }
        //  return ans;
        
        // Using stacks 
        
        sort(arr.begin(),arr.end());
        
        stack<vector<int>> s;
        
        s.push(arr[0]);
        for(int i=1;i<arr.size();i++)
        {
            
            vector<int> a= arr[i];
            vector<int> b= s.top();
            if(b[1]>=a[0])
            {
                a[1]=max(a[1],b[1]);
                s.pop();
                s.push({b[0],a[1]});
            }
            else
            {
                s.push(a);
            }
        }
        vector<vector<int>> ans;
        while(!s.empty())
        {
            ans.push_back(s.top());
            s.pop();
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
};
