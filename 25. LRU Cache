Design a data structure that works like a LRU Cache. Here cap denotes the capacity of the cache and Q denotes the number of queries. Query can be of two types:

SET x y : sets the value of the key x with value y
GET x : gets the key of x if present else returns -1.

The LRUCache class has two methods get() and set() which are defined as follows.

get(key)   : returns the value of the key if it already exists in the cache otherwise returns -1.
set(key, value) : if the key is already present, update its value. If not present, add the key-value pair to the cache. If the cache reaches its capacity it should invalidate the least recently used item before inserting the new item.
In the constructor of the class the capacity of the cache should be intitialized.
 

Example 1:

Input:
cap = 2
Q = 2
Queries = SET 1 2 GET 1
Output: 2
Explanation: 
Cache Size = 2

SET 1 2 GET 1
SET 1 2 : 1 -> 2

GET 1 : Print the value corresponding
to Key 1, ie 2.

Example 2:

Input:
cap = 2
Q = 8
Queries = SET 1 2 SET 2 3 SET 1 5
SET 4 5 SET 6 7 GET 4 SET 1 2 GET 3
Output: 5 -1
Explanation: 
Cache Size = 2
SET 1 2 : 1 -> 2

SET 2 3 : 1 -> 2, 2 -> 3 (the most recently 
used one is kept at the rightmost position) 

SET 1 5 : 2 -> 3, 1 -> 5

SET 4 5 : 1 -> 5, 4 -> 5 (Cache size is 2, hence 
we delete the least recently used key-value pair)

SET 6 7 : 4 -> 5, 6 -> 7 

GET 4 : Prints 5 (The cache now looks like
6 -> 7, 4->5)

SET 1 2 : 4 -> 5, 1 -> 2 
(Cache size is 2, hence we delete the least 
recently used key-value pair)

GET 3 : No key value pair having 
key = 3. Hence, -1 is printed.



// design the class in the most optimal way

class LRUCache
{
    private:

    public:
    
    class node
    {
        public:
            int key;
            int val;
            node* prev;
            node* next;
            node(int _key, int _val)
            {
                key= _key;
                val=_val;
            }
    };
    node* head= new node(-1,-1);
    node* tail= new node(-1,-1);
    unordered_map<int,node*> m;
    int capacity;
    //Constructor for initializing the cache capacity with the given value.
    LRUCache(int cap)
    {
        // code here
        capacity= cap;
        head->next=tail;
        tail->prev= head;
    }
    //// Own function 
    void addnode(node* newnode)
    {
        node* temp =head->next;
        newnode->next=temp;
        newnode->prev= head;
        head->next= newnode;
        temp->prev= newnode;
    }
    void delnode(node* delNode)
    {
        node* delprev= delNode->prev;
        node* delnext= delNode->next;
        delprev->next=delnext;
        delnext->prev= delprev;
    }
    
    //Function to return value corresponding to the key.
    int GET(int key)
    {
        // your code here
        if(m.find(key)!=m.end())
        {
            node* resnode=m[key];
            int res= resnode->val;
            m.erase(key);
            delnode(resnode);
            addnode(resnode);
            m[key]= head->next;
            return res;
        }
        return -1;
    }
    
    //Function for storing key-value pair.
    void SET(int key, int value)
    {
        // your code here
        if(m.find(key)!=m.end())
        {
            node* exitingnode= m[key];
            m.erase(key);
            delnode(exitingnode);
        }
        if(m.size()==capacity)
        {
            m.erase(tail->prev->key);
            delnode(tail->prev);
        }
        addnode(new node(key,value));
        m[key]= head->next;
    }
};
