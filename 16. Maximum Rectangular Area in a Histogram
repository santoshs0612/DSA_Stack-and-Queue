Find the largest rectangular area possible in a given histogram where the largest rectangle can be made of a number of contiguous bars. For simplicity, assume that all bars have the same width and the width is 1 unit, there will be N bars height of each bar will be given by the array arr.

Example 1:

Input:
N = 7
arr[] = {6,2,5,4,5,1,6}
Output: 12
Explanation: 


Example 2:

Input:
N = 8
arr[] = {7 2 8 9 1 3 6 5}
Output: 16
Explanation: Maximum size of the histogram 
will be 8  and there will be 2 consecutive 
histogram. And hence the area of the 
histogram will be 8x2 = 16.


class Solution
{
    public:
    typedef long long ll;
    vector<ll> next_smallest_left(ll arr[],int n)
    {
        vector<ll> left;
        stack<pair<ll,ll>> st;
        ll psudo_index=-1;
        for(ll i=0;i<n;i++)
        {
            if(st.empty())
            {
                left.push_back(psudo_index);
            }
            else if(!st.empty() && arr[i]>st.top().first)
            {
                left.push_back(st.top().second);
            }
            else if(!st.empty() && arr[i]<=st.top().first)
            {
                
                while(!st.empty() && arr[i]<=st.top().first)
                {
                    st.pop();
                }
                if(st.empty())
                {
                    left.push_back(psudo_index);
                }
                else 
                {
                    left.push_back(st.top().second);
                }
            }
            st.push(make_pair(arr[i],i));
        }
        //reverse(left.begin(),left.end());
        return left;
    }
    vector<ll> next_smallest_Right(ll arr[],int n)
    {
        vector<ll> right;
        stack<pair<ll,ll>> st;
        ll psudo_index=n;
        for(ll i=n-1;i>=0;i--)
        {
            if(st.empty())
            {
                right.push_back(psudo_index);
            }
            else if(!st.empty() && arr[i]>st.top().first)
            {
                right.push_back(st.top().second);
            }
            else if(!st.empty() && arr[i]<=st.top().first)
            {
                
                while(!st.empty() && arr[i]<=st.top().first)
                {
                    st.pop();
                }
                if(st.empty())
                {
                    right.push_back(psudo_index);
                }
                else 
                {
                    right.push_back(st.top().second);
                }
            }
            st.push(make_pair(arr[i],i));
        }
        reverse(right.begin(),right.end());
        return right;
    }
    //Function to find largest rectangular area possible in a given histogram.
    long long getMaxArea(long long arr[], int n)
    {
        // Your code herell
// Method 1 
        // typedef long long ll;
        // ll h=0,p=0, i=1;
        // stack<ll> height;
        // stack<ll> st_pos;
        // st_pos.push(0);
        // ll max_area=INT_MIN;
        // for(i=0;i<n;i++)
        // {
        //     if(height.empty() ||arr[i]>height.top() )
        //     {
        //         height.push(arr[i]);
        //         st_pos.push(i);
        //     }
        //     else if(!height.empty() && arr[i]<height.top())
        //     {
                
        //         while(!height.empty() && arr[i]<height.top())
        //         {
        //             h= height.top();
        //             height.pop();
        //             p= st_pos.top();
        //             st_pos.pop();
        //             max_area= max(max_area,h*(i-p));
        //         }
        //         st_pos.push(p);
        //         height.push(arr[i]);
        //     }
        // }
        //         while(!height.empty())
        //         {
        //             h= height.top();
        //             height.pop();
        //             p= st_pos.top();
        //             st_pos.pop();
        //             max_area= max(max_area,h*(i-p));
        //         }
                
        //         return max_area;
        
        
// Method -2
        // vector<ll> right= next_smallest_Right(arr,n);
        // vector<ll> left= next_smallest_left(arr,n);
        // vector<ll> width;
        // for(int i=0;i<n;i++)
        // {
        //     //cout<<right[i]<<" ";
        //     //cout<<left[i]<<" ";
        //     width.push_back(right[i]-left[i]-1);
        // }
        // ll max_area=INT_MIN;
        // for(int i=0;i<n;i++)
        // {
        //     max_area=max(max_area,width[i]*arr[i]);
        // }
        // return max_area;
// Method -3
        
        stack<int> s;
        vector<int> leftSmall(n);
        vector<int> rightSmall(n);
        // filling the left array 
        for(int i=0;i<n;i++)
        {
            while(!s.empty() && arr[s.top()]>= arr[i])
            {
                s.pop();
            }
            if(s.empty())
            {
                leftSmall[i]=0;
            }
            else{
                leftSmall[i]= s.top()+1;
            }
            s.push(i);
        }
        // Filling the rightsmaller
        while(!s.empty()) s.pop();
        
        for(int i=n-1;i>=0;i--)
        {
            while(!s.empty() && arr[s.top()]>=arr[i])
            {
                s.pop();
            }
            if(s.empty())
            {
                rightSmall[i]=n-1;
            }
            else 
            {
                rightSmall[i]=s.top()-1;
            }
            s.push(i);
        }
        // finding the area
        long long int  maxArea= INT_MIN;
        for(int i=0;i<n;i++)
        {
            maxArea=max(maxArea, (rightSmall[i]-leftSmall[i]+1)*arr[i]);
        }
        return maxArea;
        
    }
};
