Given an infix expression in the form of string str. Convert this infix expression to postfix expression.

Infix expression: The expression of the form a op b. When an operator is in-between every pair of operands.
Postfix expression: The expression of the form a b op. When an operator is followed for every pair of operands.
Note: The order of precedence is: ^ greater than * equals to / greater than + equals to -. 
Example 1:

Input: str = "a+b*(c^d-e)^(f+g*h)-i"
Output: abcd^e-fgh*+^*+i-
Explanation:
After converting the infix expression 
into postfix expression, the resultant 
expression will be abcd^e-fgh*+^*+i-
Example 2:

Input: str = "A*(B+C)/D"
Output: ABC+*D/
Explanation:
After converting the infix expression 
into postfix expression, the resultant 
expression will be ABC+*D/


class Solution {
  public:
    int prece(char c)
    {
        if(c=='^')
        {
            return 3;
        }
        else if(c=='*' || c=='/')
        {
            return 2;
        }
        else if(c=='+' || c=='-')
        {
            return 1;
        }
        else 
        {
            return -1;
        }
    }
    // Function to convert an infix expression to a postfix expression.
    string infixToPostfix(string S) {
        // Your code here
        stack<char> s;
        string ans;
        
        for(int i=0;i<S.length();i++)
        {
            char c= S[i];
            // checking for operand 
            if((c>='a' && c<='z') || (c>='A' && c<='Z')
                || (c>='0' && c<='9'))
                {
                    ans+=c;
                }
            // Checking for '('
            else if(c=='(')
            {
                s.push(c);
            }
            // Checking for ')'
            else if(c==')')
            {
                // Pulling all operator till meet ")"
                while(s.top()!='(')
                {
                    ans+=s.top();
                    s.pop();
                }
                s.pop();
            }
            // If operater forund 
            else 
            {
                while(!s.empty() && prece(c)<= prece(s.top()))
                {
                    ans+=s.top();
                    s.pop();
                }
                s.push(c);
            }
                            
        }
        
        while (!s.empty())
        {
            ans+=s.top();
            s.pop();
        }
        return ans;
    }
};
